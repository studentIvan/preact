{"version":3,"sources":["../src/h.js","../src/util.js","../src/clone-element.js","../src/constants.js","../src/render-queue.js","../src/vdom/index.js","../src/dom/index.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/component.js","../src/vnode.js","../src/options.js","../src/render.js","../src/preact.js"],"names":["nodeName","attributes","lastSimple","child","simple","i","children","EMPTY_CHILDREN","arguments","length","stack","push","pop","String","p","VNode","key","options","vnode","extend","obj","props","cloneElement","h","slice","call","FORCE_RENDER","component","ASYNC_RENDER","defer","rerender","IS_NON_DIMENSIONAL","items","enqueueRender","_dirty","list","isNamedNode","node","hydrating","_componentConstructor","isSameNodeType","toLowerCase","defaultProps","normalizedNodeName","createNode","isSvg","undefined","createElementNS","document","createElement","parentNode","removeChild","name","value","removeNode","style","setAccessor","old","test","innerHTML","__html","useCapture","replace","substring","eventProxy","removeEventListener","_listeners","removeAttribute","ns","setAttributeNS","setAttribute","flushMounts","mounts","diffLevel","isSvgMode","e","c","_ancestorComponent","componentDidMount","context","mountAll","parent","componentRoot","ownerSVGElement","catchErrorInComponent","dom","ret","appendChild","prevSvgMode","splitText","_component","nodeValue","out","replaceChild","vnodeName","recollectNodeTree","buildComponentFromVNode","ATTR_KEY","firstChild","fc","__preactattr_","a","vchildren","nextSibling","innerDiffNode","dangerouslySetInnerHTML","diffAttributes","j","originalChildren","keyed","childNodes","childrenLen","vlen","min","len","_child","__key","keyedLen","vchild","isHydrating","trim","f","unmountOnly","unmountComponent","ref","removeChildren","previousSibling","next","attrs","inst","Ctor","prototype","render","Component","recyclerComponents","createComponent","nextBase","splice","constructor","setComponentProps","renderMode","_disable","__ref","doRender","componentWillMount","componentWillReceiveProps","prevContext","base","error","renderComponent","_caught","componentDidCatch","isChild","previousProps","previousState","previousContext","state","prevProps","prevState","isUpdate","initialChildComponent","skip","getDerivedStateFromProps","snapshot","cbase","exception","clearCaught","shouldComponentUpdate","rendered","getChildContext","getSnapshotBeforeUpdate","childComponent","toUnmount","childProps","getNodeProps","diff","initialBase","baseParent","componentRef","t","_parentComponent","componentDidUpdate","afterUpdate","unshift","_renderCallbacks","ancestorComponent","oldDom","isOwner","isDirectOwner","originalComponent","beforeUnmount","componentWillUnmount","inner","this","callback","Promise","resolve","then","bind","setTimeout","NO_RENDER","SYNC_RENDER","setState","prev","forceUpdate","module","exports","preact","self"],"mappings":"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","file":"preact.min.js","sourcesContent":["import { VNode } from './vnode';\nimport options from './options';\n\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility\n * reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a\n * lightweight representation of the structure of a DOM tree. This structure can\n * be realized by recursively comparing it against the current _actual_ DOM\n * structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string | function} nodeName An element name. Ex: `div`, `a`, `span`, etc.\n * @param {object | null} attributes Any attributes/props to set on the created element.\n * @param {VNode[]} [rest] Additional arguments are taken to be children to\n *  append. Can be infinitely nested Arrays.\n *\n * @public\n */\nexport function h(nodeName, attributes) {\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children!=null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse {\n\t\t\tif (typeof child==='boolean') child = null;\n\n\t\t\tif ((simple = typeof nodeName!=='function')) {\n\t\t\t\tif (child==null) child = '';\n\t\t\t\telse if (typeof child==='number') child = String(child);\n\t\t\t\telse if (typeof child!=='string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse if (children===EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tlet p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes==null ? undefined : attributes;\n\tp.key = attributes==null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode!==undefined) options.vnode(p);\n\n\treturn p;\n}\n","/**\n * Copy all properties from `props` onto `obj`.\n * @param {object} obj Object onto which properties should be copied.\n * @param {object} props Object from which to copy properties.\n * @returns {object}\n * @private\n */\nexport function extend(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n * @type {(callback: function) => void}\n */\nexport const defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n","import { extend } from './util';\nimport { h } from './h';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {import('./vnode').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./vnode').VNode>} [rest] Any additional arguments will be used as replacement\n *  children.\n */\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(extend({}, vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","// render modes\n\n/** Do not re-render a component */\nexport const NO_RENDER = 0;\n/** Synchronously re-render a component and its children */\nexport const SYNC_RENDER = 1;\n/** Synchronously re-render a component, even if its lifecycle methods attempt to prevent it. */\nexport const FORCE_RENDER = 2;\n/** Queue asynchronous re-render of a component and it's children */\nexport const ASYNC_RENDER = 3;\n\n\nexport const ATTR_KEY = '__preactattr_';\n\n/** DOM properties that should NOT have \"px\" added when numeric */\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n","import options from './options';\nimport { defer } from './util';\nimport { renderComponent } from './vdom/component';\n\n/**\n * Managed queue of dirty components to be re-rendered\n * @type {Array<import('./component').Component>}\n */\nlet items = [];\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./component').Component} component The component to rerender\n */\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\n/** Rerender all enqueued dirty components */\nexport function rerender() {\n\tlet p, list = items;\n\titems = [];\n\twhile ( (p = list.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { extend } from '../util';\n\n\n/**\n * Check if two nodes are equivalent.\n * @param {import('../dom').PreactElement} node DOM Node to compare\n * @param {import('../vnode').VNode} vnode Virtual DOM node to compare\n * @param {boolean} [hydrating=false] If true, ignores component constructors\n *  when comparing.\n * @private\n */\nexport function isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\t\treturn node.splitText!==undefined;\n\t}\n\tif (typeof vnode.nodeName==='string') {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\treturn hydrating || node._componentConstructor===vnode.nodeName;\n}\n\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n * @param {import('../dom').PreactElement} node A DOM Element to inspect the name of.\n * @param {string} nodeName Unnormalized name to compare against.\n */\nexport function isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName===nodeName || node.nodeName.toLowerCase()===nodeName.toLowerCase();\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n * @param {import('../vnode').VNode} vnode The VNode to get props for\n * @returns {object} The props to use for this VNode\n */\nexport function getNodeProps(vnode) {\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps!==undefined) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * A DOM event listener\n * @typedef {(e: Event) => void} EventListner\n */\n\n/**\n * A mapping of event types to event listeners\n * @typedef {Object.<string, EventListener>} EventListenerMap\n */\n\n/**\n * Properties Preact adds to elements it creates\n * @typedef PreactElementExtensions\n * @property {string} [normalizedNodeName] A normalized node name to use in diffing\n * @property {EventListenerMap} [_listeners] A map of event listeners added by components to this DOM node\n * @property {import('../component').Component} [_component] The component that rendered this DOM node\n * @property {function} [_componentConstructor] The constructor of the component that rendered this DOM node\n */\n\n/**\n * A DOM element that has been extended with Preact properties\n * @typedef {Element & ElementCSSInlineStyle & PreactElementExtensions} PreactElement\n */\n\n/**\n * Create an element with the given nodeName.\n * @param {string} nodeName The DOM node to create\n * @param {boolean} [isSvg=false] If `true`, creates an element within the SVG\n *  namespace.\n * @returns {PreactElement} The created DOM node\n */\nexport function createNode(nodeName, isSvg) {\n\t/** @type {PreactElement} */\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n\n/**\n * Remove a child node from its parent if attached.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n\n/**\n * Set a named attribute on the given Node, with special behavior for some names\n * and event handlers. If `value` is `null`, the attribute/handler will be\n * removed.\n * @param {PreactElement} node An element to mutate\n * @param {string} name The name/key to set, such as an event or attribute name\n * @param {*} old The last value that was set for this name/node pair\n * @param {*} value An attribute value, such as a function to be used as an\n *  event handler\n * @param {boolean} isSvg Are we currently diffing inside an svg?\n * @private\n */\nexport function setAccessor(node, name, old, value, isSvg) {\n\tif (name==='className') name = 'class';\n\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (typeof old!=='string') {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\t// Attempt to set a DOM property to the given value.\n\t\t// IE & FF throw for certain property-value combinations.\n\t\ttry {\n\t\t\tnode[name] = value==null ? '' : value;\n\t\t} catch (e) { }\n\t\tif ((value==null || value===false) && name!='spellcheck') node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink:?/, '')));\n\t\t// spellcheck is treated differently than all other boolean values and\n\t\t// should not be removed when the value is `false`. See:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-spellcheck\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { ATTR_KEY } from '../constants';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { buildComponentFromVNode, catchErrorInComponent } from './component';\nimport { createNode, setAccessor } from '../dom/index';\nimport { unmountComponent } from './component';\nimport options from '../options';\nimport { removeNode } from '../dom/index';\n\n/**\n * Queue of components that have been mounted and are awaiting componentDidMount\n * @type {Array<import('../component').Component>}\n */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c=mounts.pop())) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) {\n\t\t\ttry {\n\t\t\t\tc.componentDidMount();\n\t\t\t} catch (e) {\n\t\t\t\tcatchErrorInComponent(e, c._ancestorComponent);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n * @param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a `vnode`\n * @param {import('../vnode').VNode} vnode A VNode (with descendants forming a tree) representing\n *  the desired DOM structure\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {Element} parent ?\n * @param {import('../component').Component} [componentRoot] The nearest ancestor component beneath\n *  which the diff will occur\n * @returns {import('../dom').PreactElement} The created/mutated element\n * @private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret;\n\ttry {\n\t\treturn ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\t} finally {\n\t\t// append the element if its a new parent\n\t\tif (ret && parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t\t// diffLevel being reduced to 0 means we're exiting the diff\n\t\tif (!--diffLevel) {\n\t\t\thydrating = false;\n\t\t\t// invoke queued componentDidMount lifecycle methods\n\t\t\tif (!componentRoot) flushMounts();\n\t\t}\n\t}\n}\n\n\n/**\n * Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing.\n * @param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a `vnode`\n * @param {import('../vnode').VNode} vnode A VNode (with descendants forming a tree) representing the desired DOM structure\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {import('../component').Component} [componentRoot] The nearest ancestor component beneath\n *  which the diff will occur\n * @private\n */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tlet out = dom,\n\t\tprevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode==null || typeof vnode==='boolean') vnode = '';\n\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout[ATTR_KEY] = true;\n\n\t\treturn out;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff:\n\tlet vnodeName = vnode.nodeName;\n\tif (typeof vnodeName==='function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll, componentRoot);\n\t}\n\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName==='svg' ? true : vnodeName==='foreignObject' ? false : isSvgMode;\n\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY],\n\t\tvchildren = vnode.children;\n\n\tif (props==null) {\n\t\tprops = out[ATTR_KEY] = {};\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling==null) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc!=null) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null, componentRoot);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/**\n * Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n * @param {import('../dom').PreactElement} dom Element whose children should be compared & mutated\n * @param {Array<import('../vnode').VNode>} vchildren Array of VNodes to compare to `dom.childNodes`\n * @param {object} context Implicitly descendant context object (from most\n *  recent `getChildContext()`)\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {boolean} isHydrating if `true`, consumes externally created elements\n *  similar to hydration\n * @param {import('../component').Component} [componentRoot] The nearest ancestor component beneath\n *  which the diff will occur\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating, componentRoot) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren ? vchildren.length : 0,\n\t\tj, c, f, vchild, child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len!==0) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen!==0) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll, componentRoot);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child!==dom && child!==f) {\n\t\t\t\tif (f==null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child===f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min<=childrenLen) {\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\n\t}\n}\n\n\n\n/**\n * Recursively recycle (or just unmount) a node and its descendants.\n * @param {import('../dom').PreactElement} node DOM node to start\n *  unmount/removal from\n * @param {boolean} [unmountOnly=false] If `true`, only triggers unmount\n *  lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY]!=null && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\n\n\t\tif (unmountOnly===false || node[ATTR_KEY]==null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n\n/**\n * Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nexport function removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tlet next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n\n/**\n * Apply differences in attributes from a VNode to the given DOM Element.\n * @param {import('../dom').PreactElement} dom Element with attributes to diff `attrs` against\n * @param {object} attrs The desired end-state key-value attribute pairs\n * @param {object} old Current/previous attributes (from previous VNode or\n *  element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\tlet name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/**\n * Retains a pool of Components for re-use.\n * @type {Component[]}\n * @private\n */\nexport const recyclerComponents = [];\n\n\n/**\n * Create a component. Normalizes differences between PFC's and classful\n * Components.\n * @param {function} Ctor The constructor of the component to create\n * @param {object} props The initial props of the component\n * @param {object} context The initial context of the component\n * @param {import('../component').Component} [ancestorComponent] The nearest ancestor component beneath\n *  which the new component will be mounted\n * @returns {import('../component').Component}\n */\nexport function createComponent(Ctor, props, context, ancestorComponent) {\n\tlet inst, i = recyclerComponents.length;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t}\n\telse {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\tinst._ancestorComponent = ancestorComponent;\n\n\twhile (i--) {\n\t\tif (recyclerComponents[i].constructor===Ctor) {\n\t\t\tinst.nextBase = recyclerComponents[i].nextBase;\n\t\t\trecyclerComponents.splice(i, 1);\n\t\t\treturn inst;\n\t\t}\n\t}\n\n\treturn inst;\n}\n\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { extend } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';\nimport { createComponent, recyclerComponents } from './component-recycler';\nimport { removeNode } from '../dom/index';\n\n/**\n * Set a component's `props` and possibly re-render the component\n * @param {import('../component').Component} component The Component to set props on\n * @param {object} props The new props\n * @param {number} renderMode Render options - specifies how to re-render the component\n * @param {object} context The new context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n */\nexport function setComponentProps(component, props, renderMode, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tcomponent.__ref = props.ref;\n\tcomponent.__key = props.key;\n\tdelete props.ref;\n\tdelete props.key;\n\n\tif (typeof component.constructor.getDerivedStateFromProps === 'undefined') {\n\t\tif (!component.base || mountAll) {\n\t\t\tif (component.componentWillMount) component.componentWillMount();\n\t\t}\n\t\telse if (component.componentWillReceiveProps) {\n\t\t\tcomponent.componentWillReceiveProps(props, context);\n\t\t}\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (renderMode!==NO_RENDER) {\n\t\tif (renderMode===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\nexport function catchErrorInComponent(error, component) {\n\tflushMounts();\n\tfor (; component; component = component._ancestorComponent) {\n\t\tif (component.componentDidCatch && !component._caught) {\n\t\t\ttry {\n\t\t\t\tcomponent.componentDidCatch(error);\n\t\t\t\tcomponent._caught = true;\n\t\t\t\tenqueueRender(component);\n\t\t\t\treturn;\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\tthrow error;\n}\n\n\n\n/**\n * Render a Component, triggering necessary lifecycle events and taking\n * High-Order Components into account.\n * @param {import('../component').Component} component The component to render\n * @param {number} [renderMode] render mode, see constants.js for available options.\n * @param {boolean} [mountAll] Whether or not to immediately mount all components\n * @param {boolean} [isChild] ?\n * @private\n */\nexport function renderComponent(component, renderMode, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet props = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tskip = false,\n\t\tsnapshot = previousContext,\n\t\trendered, inst, cbase,\n\t\texception, clearCaught = component._caught;\n\n\ttry {\n\t\tif (component.constructor.getDerivedStateFromProps) {\n\t\t\tstate = extend(extend({}, state), component.constructor.getDerivedStateFromProps(props, state));\n\t\t\tcomponent.state = state;\n\t\t}\n\n\t\t// if updating\n\t\tif (isUpdate) {\n\t\t\tcomponent.props = previousProps;\n\t\t\tcomponent.state = previousState;\n\t\t\tcomponent.context = previousContext;\n\t\t\tif (renderMode!==FORCE_RENDER\n\t\t\t\t&& component.shouldComponentUpdate\n\t\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\t\tskip = true;\n\t\t\t}\n\t\t\telse if (component.componentWillUpdate) {\n\t\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t\t}\n\t\t\tcomponent.props = props;\n\t\t\tcomponent.state = state;\n\t\t\tcomponent.context = context;\n\t\t}\n\n\t\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\t\tcomponent._dirty = false;\n\n\t\tif (!skip) {\n\t\t\trendered = component.render(props, state, context);\n\n\t\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\t\tif (component.getChildContext) {\n\t\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t\t}\n\n\t\t\tif (isUpdate && component.getSnapshotBeforeUpdate) {\n\t\t\t\tsnapshot = component.getSnapshotBeforeUpdate(previousProps, previousState);\n\t\t\t}\n\n\t\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\t\ttoUnmount, base;\n\t\t\ttry {\n\t\t\t\tif (typeof childComponent==='function') {\n\t\t\t\t\t// set up high order component link\n\n\t\t\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\t\t\tinst = initialChildComponent;\n\n\t\t\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context, false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttoUnmount = inst;\n\n\t\t\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context, component);\n\t\t\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\t\t\tinst._parentComponent = component;\n\t\t\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context, false);\n\t\t\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tbase = inst.base;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcbase = initialBase;\n\n\t\t\t\t\t// destroy high order component link\n\t\t\t\t\ttoUnmount = initialChildComponent;\n\t\t\t\t\tif (toUnmount) {\n\t\t\t\t\t\tcbase = component._component = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (initialBase || renderMode===SYNC_RENDER) {\n\t\t\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, component);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\texception = e;\n\t\t\t\tclearCaught = false;\n\t\t\t\tif (!base) {\n\t\t\t\t\tbase = initialBase || document.createTextNode(\"\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\t\tif (!toUnmount) {\n\t\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (toUnmount && toUnmount.base) {\n\t\t\t\tunmountComponent(toUnmount);\n\t\t\t}\n\n\t\t\tcomponent.base = base;\n\t\t\tif (base && !isChild) {\n\t\t\t\tlet componentRef = component,\n\t\t\t\t\tt = component;\n\t\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t\t(componentRef = t).base = base;\n\t\t\t\t}\n\t\t\t\tbase._component = componentRef;\n\t\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t\t}\n\t\t}\n\n\t\tif (!isUpdate || mountAll) {\n\t\t\tmounts.unshift(component);\n\t\t}\n\t\telse if (!skip) {\n\t\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t\t// flushMounts();\n\n\t\t\tif (component.componentDidUpdate) {\n\t\t\t\tcomponent.componentDidUpdate(previousProps, previousState, snapshot);\n\t\t\t}\n\t\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t\t}\n\n\t\twhile (component._renderCallbacks.length) component._renderCallbacks.pop().call(component);\n\n\t\tif (clearCaught) {\n\t\t\tcomponent._caught = false;\n\t\t}\n\n\t} catch (e) {\n\t\tcatchErrorInComponent(e, component._ancestorComponent);\n\t}\n\n\tif (typeof exception !== \"undefined\") {\n\t\tcatchErrorInComponent(exception, component);\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/**\n * Apply the Component referenced by a VNode to the DOM.\n * @param {import('../dom').PreactElement} dom The DOM node to mutate\n * @param {import('../vnode').VNode} vnode A Component-referencing VNode\n * @param {object} context The current context\n * @param {boolean} mountAll Whether or not to immediately mount all components\n * @param {import('../component').Component} [ancestorComponent] The nearest ancestor component\n *  beneath which the new component will be mounted\n * @returns {import('../dom').PreactElement} The created/mutated element\n * @private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll, ancestorComponent) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context, ancestorComponent);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/**\n * Remove a component from the DOM and recycle it.\n * @param {import('../component').Component} component The Component instance to unmount\n * @private\n */\nexport function unmountComponent(component) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tlet base = component.base;\n\n\tif (component.componentWillUnmount) {\n\t\ttry {\n\t\t\tcomponent.componentWillUnmount();\n\t\t} catch (e) {\n\t\t\tcatchErrorInComponent(e, component._ancestorComponent);\n\t\t}\n\t}\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\trecyclerComponents.push(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n","import { FORCE_RENDER } from './constants';\nimport { extend } from './util';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n/**\n * Base Component class.\n * Provides `setState()` and `forceUpdate()`, which trigger rendering.\n * @typedef {object} Component\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components' getChildContext\n * @public\n *\n * @example\n * class MyFoo extends Component {\n *   render(props, state) {\n *     return <div />;\n *   }\n * }\n */\nexport function Component(props, context) {\n\tthis._dirty = true;\n\tthis._caught = false;\n\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.context = context;\n\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.props = props;\n\n\t/**\n\t * @public\n\t * @type {object}\n\t */\n\tthis.state = this.state || {};\n\n\tthis._renderCallbacks = [];\n}\n\n\nextend(Component.prototype, {\n\n\t/**\n\t * Update component state and schedule a re-render.\n\t * @param {object} state A dict of state properties to be shallowly merged\n\t * \tinto the current state, or a function that will produce such a dict. The\n\t * \tfunction is called with the current state and props.\n\t * @param {() => void} callback A function to be called once component state is\n\t * \tupdated\n\t */\n\tsetState(state, callback) {\n\t\tconst prev = this.prevState = this.state;\n\t\tif (typeof state === 'function') state = state(prev, this.props);\n\t\tthis.state = extend(extend({}, prev), state);\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/**\n\t * Immediately perform a synchronous re-render of the component.\n\t * @param {() => void} callback A function to be called after component is\n\t * \tre-rendered.\n\t * @private\n\t */\n\tforceUpdate(callback) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/**\n\t * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t * @param {object} props Props (eg: JSX attributes) received from parent\n\t * \telement/component\n\t * @param {object} state The component's current state\n\t * @param {object} context Context object, as returned by the nearest\n\t *  ancestor's `getChildContext()`\n\t * @returns {import('./vnode').VNode | void}\n\t */\n\trender() {}\n\n});\n","/**\n * Virtual DOM Node\n * @typedef VNode\n * @property {string | function} nodeName The string of the DOM node to create or Component constructor to render\n * @property {Array<VNode | string>} children The children of node\n * @property {string | number | undefined} key The key used to identify this VNode in a list\n * @property {object} attributes The properties of this VNode\n */\nexport const VNode = function VNode() {};\n","/**\n * @typedef {import('./component').Component} Component\n * @typedef {import('./vnode').VNode} VNode\n */\n\n/**\n * Global options\n * @public\n * @typedef Options\n * @property {boolean} [syncComponentUpdates] If `true`, `prop` changes trigger synchronous component updates. Defaults to true.\n * @property {(vnode: VNode) => void} [vnode] Processes all created VNodes.\n * @property {(component: Component) => void} [afterMount] Hook invoked after a component is mounted.\n * @property {(component: Component) => void} [afterUpdate] Hook invoked after the DOM is updated with a component's latest render.\n * @property {(component: Component) => void} [beforeUnmount] Hook invoked immediately before a component is unmounted.\n * @property {(rerender: function) => void} [debounceRendering] Hook invoked whenever a rerender is requested. Can be used to debounce rerenders.\n * @property {(event: Event) => Event | void} [event] Hook invoked before any Preact event listeners. The return value (if any) replaces the native browser event given to event listeners\n */\n\n/** @type {Options}  */\nconst options = {};\n\nexport default options;\n","import { diff } from './vdom/diff';\n\n/**\n * Render JSX into a `parent` Element.\n * @param {import('./vnode').VNode} vnode A (JSX) VNode to render\n * @param {import('./dom').PreactElement} parent DOM element to render into\n * @param {import('./dom').PreactElement} [merge] Attempt to re-use an existing DOM tree rooted at\n *  `merge`\n * @public\n *\n * @example\n * // render a div into <body>:\n * render(<div id=\"hello\">hello!</div>, document.body);\n *\n * @example\n * // render a \"Thing\" component into #foo:\n * const Thing = ({ name }) => <span>{ name }</span>;\n * render(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, parent);\n}\n","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n"]}